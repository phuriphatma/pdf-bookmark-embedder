{"version":3,"mappings":"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","names":["PDFBookmarkEmbedder","file","bookmarks","formData","response","error","currentHost","ipadUrl","files","banner","result","maxSize","errorText","contentType","errorData","PDFDocument","__vitePreload","arrayBuffer","pdfDoc","pdfBytes","blob","url","link","message","status","ms","resolve"],"ignoreList":[],"sources":["../../main.js"],"sourcesContent":["// PDF Bookmark Embedder - Main Application\n// Optimized for iOS Safari\n\nclass PDFBookmarkEmbedder {\n    constructor() {\n        this.serverUrl = this.getServerUrl()\n        this.currentFile = null\n        this.initializeElements()\n        this.bindEvents()\n    }\n\n    async embedBookmarks(file, bookmarks) {\n        try {\n            console.log('üì§ Sending PDF to server for processing...')\n            console.log('üóÉÔ∏è File details:', {\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                lastModified: file.lastModified\n            })\n            console.log('üîó Server URL:', `${this.serverUrl}/embed-bookmarks`)\n            \n            // Send to server\n            const formData = new FormData()\n            formData.append('pdf', file)\n            formData.append('bookmarks', JSON.stringify(bookmarks))\n\n            const response = await fetch(`${this.serverUrl}/embed-bookmarks`, {\n                method: 'POST',\n                body: formData\n            })\n\n            if (response.ok) {\n                const blob = await response.blob()\n                return blob\n            } else {\n                throw new Error(`Server error: ${response.status}`)\n            }\n        } catch (error) {\n            console.error('‚ùå Server error:', error)\n            throw error\n        }\n    }\n\n    getServerUrl() {\n        // If we're accessing from a different device, use the current host\n        const currentHost = window.location.hostname\n        if (currentHost !== 'localhost' && currentHost !== '127.0.0.1') {\n            return `http://${currentHost}:8081`\n        }\n        return 'http://localhost:8081'\n    }\n\n    displayNetworkInfo() {\n        // Show network access information\n        const currentHost = window.location.hostname\n        if (currentHost !== 'localhost' && currentHost !== '127.0.0.1') {\n            console.log(`üì± Accessing from network device: ${currentHost}`)\n            console.log(`üîó Server URL: ${this.serverUrl}`)\n        } else {\n            // Show iPad access URL when running on localhost\n            const ipadUrl = `http://192.168.1.182:3000`\n            this.elements.networkInfo.style.display = 'block'\n            this.elements.ipadUrl.textContent = ipadUrl\n            console.log(`üì± iPad can access at: ${ipadUrl}`)\n        }\n    }\n\n    initializeElements() {\n        // Get all DOM elements\n        this.elements = {\n            uploadArea: document.getElementById('uploadArea'),\n            fileInput: document.getElementById('fileInput'),\n            uploadBtn: document.getElementById('uploadBtn'),\n            processing: document.getElementById('processing'),\n            processingStatus: document.getElementById('processingStatus'),\n            result: document.getElementById('result'),\n            downloadBtn: document.getElementById('downloadBtn'),\n            newFileBtn: document.getElementById('newFileBtn'),\n            error: document.getElementById('error'),\n            errorMessage: document.getElementById('errorMessage'),\n            retryBtn: document.getElementById('retryBtn'),\n            networkInfo: document.getElementById('networkInfo'),\n            ipadUrl: document.getElementById('ipadUrl')\n        }\n    }\n\n    bindEvents() {\n        // File input events\n        this.elements.uploadBtn.addEventListener('click', () => {\n            this.elements.fileInput.click()\n        })\n\n        this.elements.fileInput.addEventListener('change', (e) => {\n            if (e.target.files.length > 0) {\n                this.handleFileUpload(e.target.files[0])\n            }\n        })\n\n        // Drag and drop events\n        this.elements.uploadArea.addEventListener('click', () => {\n            this.elements.fileInput.click()\n        })\n\n        this.elements.uploadArea.addEventListener('dragover', (e) => {\n            e.preventDefault()\n            this.elements.uploadArea.classList.add('dragover')\n        })\n\n        this.elements.uploadArea.addEventListener('dragleave', () => {\n            this.elements.uploadArea.classList.remove('dragover')\n        })\n\n        this.elements.uploadArea.addEventListener('drop', (e) => {\n            e.preventDefault()\n            this.elements.uploadArea.classList.remove('dragover')\n            \n            const files = e.dataTransfer.files\n            if (files.length > 0 && files[0].type === 'application/pdf') {\n                this.handleFileUpload(files[0])\n            }\n        })\n\n        // Action buttons\n        this.elements.downloadBtn.addEventListener('click', () => {\n            this.downloadProcessedPDF()\n        })\n\n        this.elements.newFileBtn.addEventListener('click', () => {\n            this.resetToUpload()\n        })\n\n        this.elements.retryBtn.addEventListener('click', () => {\n            if (this.currentFile) {\n                this.handleFileUpload(this.currentFile)\n            } else {\n                this.resetToUpload()\n            }\n        })\n    }\n\n    async checkServerStatus() {\n        try {\n            console.log('üîç Checking server status...')\n            const response = await fetch(`${this.serverUrl}/health`, {\n                method: 'GET',\n                mode: 'cors'\n            })\n            \n            if (response.ok) {\n                console.log('‚úÖ Server is available')\n            } else {\n                console.warn('‚ö†Ô∏è Server responded with error:', response.status)\n                this.showServerWarning()\n            }\n        } catch (error) {\n            console.warn('‚ö†Ô∏è Server not available:', error.message)\n            this.showServerWarning()\n        }\n    }\n\n    showServerWarning() {\n        // Create a subtle warning banner about server availability\n        const banner = document.createElement('div')\n        banner.innerHTML = `\n            <div style=\"background: #fff3cd; color: #856404; padding: 10px; text-align: center; border-radius: 5px; margin-bottom: 20px; font-size: 0.9em;\">\n                ‚ö†Ô∏è Server not detected. Make sure to run: <code>npm run server</code>\n            </div>\n        `\n        document.querySelector('.container').insertBefore(banner, document.querySelector('main'))\n    }\n\n    async handleFileUpload(file) {\n        console.log('üìÅ File uploaded:', file.name, file.size, 'bytes')\n        \n        // Validate file\n        if (!this.validateFile(file)) {\n            return\n        }\n\n        this.currentFile = file\n        this.showProcessing()\n        \n        try {\n            // Show processing steps\n            this.updateProcessingStatus('Reading PDF file...')\n            await this.delay(500)\n            \n            this.updateProcessingStatus('Adding bookmarks to pages 1, 3, and 6...')\n            await this.delay(1000)\n            \n            // Process the PDF\n            const result = await this.processPDF(file)\n            \n            if (result.success) {\n                this.processedPdfData = result.data\n                this.showResult()\n            } else {\n                this.showError(result.error || 'Processing failed')\n            }\n            \n        } catch (error) {\n            console.error('‚ùå Processing error:', error)\n            this.showError(error.message || 'Processing failed')\n        }\n    }\n\n    validateFile(file) {\n        // Check file type\n        if (file.type !== 'application/pdf') {\n            this.showError('Please select a PDF file')\n            return false\n        }\n\n        // Check file size (50MB limit)\n        const maxSize = 50 * 1024 * 1024 // 50MB\n        if (file.size > maxSize) {\n            this.showError('File too large. Please select a PDF smaller than 50MB')\n            return false\n        }\n\n        // Check if file is not empty\n        if (file.size === 0) {\n            this.showError('The selected file is empty')\n            return false\n        }\n\n        return true\n    }\n\n    async processPDF(file) {\n        try {\n            // Create form data\n            const formData = new FormData()\n            formData.append('pdf', file)\n            \n            console.log('üì§ Sending PDF to server for processing...')\n            console.log('ÔøΩ File details:', {\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                lastModified: file.lastModified\n            })\n            \n            // Send to server\n            const response = await fetch(`${this.serverUrl}/embed-bookmarks`, {\n                method: 'POST',\n                body: formData,\n                mode: 'cors'\n            })\n\n            console.log('üì° Server response status:', response.status, response.statusText)\n            console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()))\n\n            if (!response.ok) {\n                const errorText = await response.text()\n                console.error('‚ùå Server error response:', errorText)\n                throw new Error(`Server error: ${response.status} - ${errorText}`)\n            }\n\n            // Check if we got a PDF back\n            const contentType = response.headers.get('content-type')\n            console.log('üìÑ Response content type:', contentType)\n            \n            if (contentType && contentType.includes('application/pdf')) {\n                const result = await response.blob()\n                console.log('‚úÖ PDF processed successfully, size:', result.size, 'bytes')\n                \n                return {\n                    success: true,\n                    data: result\n                }\n            } else {\n                // Might be an error response in JSON\n                const errorData = await response.text()\n                console.error('‚ùå Unexpected response format:', errorData)\n                throw new Error('Server returned unexpected response format')\n            }\n            \n        } catch (error) {\n            console.error('‚ùå Server processing failed:', error)\n            \n            // Try client-side fallback\n            console.log('üîÑ Attempting client-side processing fallback...')\n            return await this.clientSideFallback(file)\n        }\n    }\n\n    async clientSideFallback(file) {\n        try {\n            // Import pdf-lib dynamically for client-side processing\n            const { PDFDocument } = await import('pdf-lib')\n            \n            this.updateProcessingStatus('Using client-side fallback...')\n            \n            // Read the PDF\n            const arrayBuffer = await file.arrayBuffer()\n            const pdfDoc = await PDFDocument.load(arrayBuffer)\n            \n            // Add metadata bookmarks (limited functionality)\n            pdfDoc.setTitle(`${file.name} - With Bookmarks`)\n            pdfDoc.setKeywords('PDF Bookmark Embedder, Page 1, Page 3, Page 6')\n            pdfDoc.setSubject('PDF with embedded bookmarks on pages 1, 3, and 6')\n            \n            // Save the PDF\n            const pdfBytes = await pdfDoc.save()\n            const blob = new Blob([pdfBytes], { type: 'application/pdf' })\n            \n            console.log('‚úÖ Client-side processing completed')\n            \n            return {\n                success: true,\n                data: blob\n            }\n            \n        } catch (error) {\n            console.error('‚ùå Client-side fallback failed:', error)\n            return {\n                success: false,\n                error: 'Both server and client-side processing failed. Please try a different PDF file.'\n            }\n        }\n    }\n\n    downloadProcessedPDF() {\n        if (!this.processedPdfData) {\n            this.showError('No processed PDF available')\n            return\n        }\n\n        try {\n            // Create download link\n            const url = URL.createObjectURL(this.processedPdfData)\n            const link = document.createElement('a')\n            link.href = url\n            link.download = this.getDownloadFilename()\n            \n            // Trigger download\n            document.body.appendChild(link)\n            link.click()\n            document.body.removeChild(link)\n            \n            // Clean up\n            URL.revokeObjectURL(url)\n            \n            console.log('üì• Download triggered')\n            \n        } catch (error) {\n            console.error('‚ùå Download failed:', error)\n            this.showError('Download failed. Please try again.')\n        }\n    }\n\n    getDownloadFilename() {\n        if (this.currentFile) {\n            const name = this.currentFile.name.replace('.pdf', '')\n            return `${name}_with_bookmarks.pdf`\n        }\n        return 'pdf_with_bookmarks.pdf'\n    }\n\n    // UI State Management\n    showProcessing() {\n        this.hideAllStates()\n        this.elements.processing.style.display = 'block'\n    }\n\n    showResult() {\n        this.hideAllStates()\n        this.elements.result.style.display = 'block'\n    }\n\n    showError(message) {\n        this.hideAllStates()\n        this.elements.error.style.display = 'block'\n        this.elements.errorMessage.textContent = message\n    }\n\n    resetToUpload() {\n        this.hideAllStates()\n        this.elements.uploadArea.style.display = 'block'\n        this.elements.fileInput.value = ''\n        this.currentFile = null\n        this.processedPdfData = null\n    }\n\n    hideAllStates() {\n        this.elements.uploadArea.style.display = 'none'\n        this.elements.processing.style.display = 'none'\n        this.elements.result.style.display = 'none'\n        this.elements.error.style.display = 'none'\n    }\n\n    updateProcessingStatus(status) {\n        this.elements.processingStatus.textContent = status\n        console.log('üîÑ', status)\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms))\n    }\n}\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('üöÄ PDF Bookmark Embedder initialized')\n    new PDFBookmarkEmbedder()\n})\n\n// Handle iOS Safari specific behaviors\nif (navigator.userAgent.includes('Safari') && navigator.userAgent.includes('Mobile')) {\n    console.log('üì± iOS Safari detected - optimized mode active')\n    \n    // Prevent zoom on file input\n    document.addEventListener('touchstart', () => {}, { passive: true })\n}\n"],"file":"assets/index-DjA7mFXD.js"}